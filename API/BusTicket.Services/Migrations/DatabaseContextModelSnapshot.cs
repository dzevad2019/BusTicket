// <auto-generated />
using System;
using BusTicket.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusTicket.Services.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusTicket.Core.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionMethod")
                        .HasColumnType("text");

                    b.Property<string>("ActiveUrl")
                        .HasColumnType("text");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("HostName")
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebBrowser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("BusTicket.Core.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "SA",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "TZ",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "MO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "ZA",
                            CountryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "ST",
                            CountryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Split"
                        },
                        new
                        {
                            Id = 6,
                            Abrv = "BG",
                            CountryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Beograd"
                        },
                        new
                        {
                            Id = 7,
                            Abrv = "NS",
                            CountryId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = 8,
                            Abrv = "BR",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Brčko"
                        },
                        new
                        {
                            Id = 9,
                            Abrv = "SR",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Srebrenik"
                        },
                        new
                        {
                            Id = 10,
                            Abrv = "KO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 11,
                            Abrv = "JA",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Jablanica"
                        },
                        new
                        {
                            Id = 12,
                            Abrv = "OL",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Olovo"
                        },
                        new
                        {
                            Id = 13,
                            Abrv = "DO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 14,
                            Abrv = "GR",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Gračanica"
                        },
                        new
                        {
                            Id = 15,
                            Abrv = "ZE",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Zenica"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "BiH",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "HR",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "RS",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Favorite = true,
                            IsDeleted = false,
                            Name = "Srbija"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("ArrivalTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OperatingDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BusLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ArrivalTime = new TimeOnly(0, 0, 0),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(0, 0, 0),
                            IsDeleted = false,
                            Name = "Sarajevo - Mostar",
                            OperatingDays = 255
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            ArrivalTime = new TimeOnly(0, 0, 0),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(0, 0, 0),
                            IsDeleted = false,
                            Name = "Mostar - Sarajevo",
                            OperatingDays = 255
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            ArrivalTime = new TimeOnly(0, 0, 0),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(0, 0, 0),
                            IsDeleted = false,
                            Name = "Brčko - Tuzla",
                            OperatingDays = 159
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            ArrivalTime = new TimeOnly(0, 0, 0),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(0, 0, 0),
                            IsDeleted = false,
                            Name = "Tuzla - Brčko",
                            OperatingDays = 159
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.HasIndex("DiscountId");

                    b.ToTable("BusLineDiscounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountId = 1,
                            IsDeleted = false,
                            Value = 5m
                        },
                        new
                        {
                            Id = 2,
                            BusLineId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountId = 1,
                            IsDeleted = false,
                            Value = 5m
                        },
                        new
                        {
                            Id = 3,
                            BusLineId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountId = 1,
                            IsDeleted = false,
                            Value = 7m
                        },
                        new
                        {
                            Id = 4,
                            BusLineId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountId = 1,
                            IsDeleted = false,
                            Value = 7m
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("integer");

                    b.Property<int>("BusLineSegmentType")
                        .HasColumnType("integer");

                    b.Property<int>("BusStopId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StopOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.HasIndex("BusStopId");

                    b.ToTable("BusLineSegments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineId = 1,
                            BusLineSegmentType = 0,
                            BusStopId = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(8, 0, 0),
                            IsDeleted = false,
                            StopOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            BusLineId = 1,
                            BusLineSegmentType = 1,
                            BusStopId = 6,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(8, 55, 0),
                            IsDeleted = false,
                            StopOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            BusLineId = 1,
                            BusLineSegmentType = 1,
                            BusStopId = 7,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(9, 25, 0),
                            IsDeleted = false,
                            StopOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            BusLineId = 1,
                            BusLineSegmentType = 2,
                            BusStopId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(10, 15, 0),
                            IsDeleted = false,
                            StopOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            BusLineId = 2,
                            BusLineSegmentType = 0,
                            BusStopId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(11, 0, 0),
                            IsDeleted = false,
                            StopOrder = 1
                        },
                        new
                        {
                            Id = 6,
                            BusLineId = 2,
                            BusLineSegmentType = 1,
                            BusStopId = 7,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(11, 45, 0),
                            IsDeleted = false,
                            StopOrder = 2
                        },
                        new
                        {
                            Id = 7,
                            BusLineId = 2,
                            BusLineSegmentType = 1,
                            BusStopId = 6,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(12, 25, 0),
                            IsDeleted = false,
                            StopOrder = 3
                        },
                        new
                        {
                            Id = 8,
                            BusLineId = 2,
                            BusLineSegmentType = 2,
                            BusStopId = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(13, 15, 0),
                            IsDeleted = false,
                            StopOrder = 4
                        },
                        new
                        {
                            Id = 9,
                            BusLineId = 3,
                            BusLineSegmentType = 0,
                            BusStopId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(8, 0, 0),
                            IsDeleted = false,
                            StopOrder = 1
                        },
                        new
                        {
                            Id = 10,
                            BusLineId = 3,
                            BusLineSegmentType = 1,
                            BusStopId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(8, 50, 0),
                            IsDeleted = false,
                            StopOrder = 2
                        },
                        new
                        {
                            Id = 11,
                            BusLineId = 3,
                            BusLineSegmentType = 2,
                            BusStopId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(9, 40, 0),
                            IsDeleted = false,
                            StopOrder = 3
                        },
                        new
                        {
                            Id = 12,
                            BusLineId = 4,
                            BusLineSegmentType = 0,
                            BusStopId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(11, 0, 0),
                            IsDeleted = false,
                            StopOrder = 1
                        },
                        new
                        {
                            Id = 13,
                            BusLineId = 4,
                            BusLineSegmentType = 1,
                            BusStopId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(11, 50, 0),
                            IsDeleted = false,
                            StopOrder = 2
                        },
                        new
                        {
                            Id = 14,
                            BusLineId = 4,
                            BusLineSegmentType = 2,
                            BusStopId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureTime = new TimeOnly(13, 0, 0),
                            IsDeleted = false,
                            StopOrder = 3
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineSegmentPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineSegmentFromId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusLineSegmentId")
                        .HasColumnType("integer");

                    b.Property<int>("BusLineSegmentToId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("OneWayTicketPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReturnTicketPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BusLineSegmentFromId");

                    b.HasIndex("BusLineSegmentId");

                    b.HasIndex("BusLineSegmentToId");

                    b.ToTable("BusLineSegmentPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineSegmentFromId = 1,
                            BusLineSegmentToId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 2,
                            BusLineSegmentFromId = 1,
                            BusLineSegmentToId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 17m,
                            ReturnTicketPrice = 27m
                        },
                        new
                        {
                            Id = 3,
                            BusLineSegmentFromId = 1,
                            BusLineSegmentToId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 27m,
                            ReturnTicketPrice = 43m
                        },
                        new
                        {
                            Id = 4,
                            BusLineSegmentFromId = 2,
                            BusLineSegmentToId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 5,
                            BusLineSegmentFromId = 2,
                            BusLineSegmentToId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 17m,
                            ReturnTicketPrice = 27m
                        },
                        new
                        {
                            Id = 6,
                            BusLineSegmentFromId = 3,
                            BusLineSegmentToId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 7,
                            BusLineSegmentFromId = 5,
                            BusLineSegmentToId = 6,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 8,
                            BusLineSegmentFromId = 5,
                            BusLineSegmentToId = 7,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 17m,
                            ReturnTicketPrice = 27m
                        },
                        new
                        {
                            Id = 9,
                            BusLineSegmentFromId = 5,
                            BusLineSegmentToId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 27m,
                            ReturnTicketPrice = 43m
                        },
                        new
                        {
                            Id = 10,
                            BusLineSegmentFromId = 6,
                            BusLineSegmentToId = 7,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 11,
                            BusLineSegmentFromId = 6,
                            BusLineSegmentToId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 17m,
                            ReturnTicketPrice = 27m
                        },
                        new
                        {
                            Id = 12,
                            BusLineSegmentFromId = 7,
                            BusLineSegmentToId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 13.5m,
                            ReturnTicketPrice = 22m
                        },
                        new
                        {
                            Id = 13,
                            BusLineSegmentFromId = 9,
                            BusLineSegmentToId = 10,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 8m,
                            ReturnTicketPrice = 12m
                        },
                        new
                        {
                            Id = 14,
                            BusLineSegmentFromId = 9,
                            BusLineSegmentToId = 11,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 15m,
                            ReturnTicketPrice = 23m
                        },
                        new
                        {
                            Id = 15,
                            BusLineSegmentFromId = 10,
                            BusLineSegmentToId = 11,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 8m,
                            ReturnTicketPrice = 12m
                        },
                        new
                        {
                            Id = 16,
                            BusLineSegmentFromId = 12,
                            BusLineSegmentToId = 13,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 8m,
                            ReturnTicketPrice = 12m
                        },
                        new
                        {
                            Id = 17,
                            BusLineSegmentFromId = 12,
                            BusLineSegmentToId = 14,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 15m,
                            ReturnTicketPrice = 23m
                        },
                        new
                        {
                            Id = 18,
                            BusLineSegmentFromId = 13,
                            BusLineSegmentToId = 14,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            OneWayTicketPrice = 8m,
                            ReturnTicketPrice = 12m
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.HasIndex("VehicleId");

                    b.ToTable("BusLineVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 2,
                            BusLineId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 3,
                            BusLineId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 4,
                            BusLineId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BusStops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Brčko"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 9,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Srebrenik"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 12,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Olovo"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Sarajevo"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 10,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Konjic"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 11,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Jablanica"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Mostar"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 13,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Doboj"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 14,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Gračanica"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 15,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "A.S. Zenica"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("WebPage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CityId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "kontakt@transturist.ba",
                            IdentificationNumber = "54125935478921",
                            IsDeleted = false,
                            Name = "Trans turist Tuzla doo",
                            PhoneNumber = "035/655-159",
                            TaxNumber = "9634578123649",
                            WebPage = "www.transturist.ba"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CityId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "kontakt@autoprevozmostar.ba",
                            IdentificationNumber = "941205935445920",
                            IsDeleted = false,
                            Name = "Autoprevoz-Bus Mostar doo",
                            PhoneNumber = "036/748-699",
                            TaxNumber = "5712991664188",
                            WebPage = "www.autoprevozmostar.ba"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CityId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "kontakt@centrotrans.ba",
                            IdentificationNumber = "36512578644166",
                            IsDeleted = false,
                            Name = "Centrotrans Sarajevo doo",
                            PhoneNumber = "033/859-775",
                            TaxNumber = "321455987462",
                            WebPage = "www.autoprevozmostar.ba"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Penzioner"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Dijete"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Nova godina"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Dan državnosti"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDateTime = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Autobus kreće u 08:15 sati!"
                        },
                        new
                        {
                            Id = 2,
                            BusLineId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDateTime = new DateTime(2025, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Linija kreće u 8 i 30!"
                        },
                        new
                        {
                            Id = 3,
                            BusLineId = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDateTime = new DateTime(2025, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Linija kreće u 8 i 30!"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PayedById")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PayedById");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PayedById = 2,
                            Status = 1,
                            TotalAmount = 27m,
                            TransactionId = "pi_3RNMKtLGoibrfc442VxeKg3x"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PayedById = 2,
                            Status = 1,
                            TotalAmount = 15m,
                            TransactionId = "pi_3RO1esLGoibrfc4417dP5TSd"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PayedById = 2,
                            Status = 1,
                            TotalAmount = 15m,
                            TransactionId = "pi_3RO1hhLGoibrfc441Jij29Sv"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            PayedById = 2,
                            Status = 1,
                            TotalAmount = 40.85m,
                            TransactionId = "pi_3ROMYELGoibrfc4400QrL9dH"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.TicketPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeat")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSeatRoundTrip")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketPersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 27m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Dzevad",
                            IsDeleted = false,
                            LastName = "Zahirovic",
                            NumberOfSeat = 16,
                            PhoneNumber = "061123456",
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 15m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Inas",
                            IsDeleted = false,
                            LastName = "Bajraktarevic",
                            NumberOfSeat = 33,
                            PhoneNumber = "061123456",
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 15m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Elvis",
                            IsDeleted = false,
                            LastName = "Zahirovic",
                            NumberOfSeat = 16,
                            PhoneNumber = "062259969",
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 40.85m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DiscountId = 1,
                            FirstName = "Dzevad",
                            IsDeleted = false,
                            LastName = "Zahirovic",
                            NumberOfSeat = 15,
                            PhoneNumber = "061155681",
                            TicketId = 4
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.TicketSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineSegmentFromId")
                        .HasColumnType("integer");

                    b.Property<int>("BusLineSegmentToId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusLineSegmentFromId");

                    b.HasIndex("BusLineSegmentToId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketSegments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusLineSegmentFromId = 1,
                            BusLineSegmentToId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateTime = new DateTime(2025, 5, 16, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            BusLineSegmentFromId = 9,
                            BusLineSegmentToId = 11,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateTime = new DateTime(2025, 5, 21, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            BusLineSegmentFromId = 9,
                            BusLineSegmentToId = 11,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateTime = new DateTime(2025, 5, 22, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            BusLineSegmentFromId = 1,
                            BusLineSegmentToId = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateTime = new DateTime(2025, 5, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 5,
                            BusLineSegmentFromId = 5,
                            BusLineSegmentToId = 8,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateTime = new DateTime(2025, 5, 26, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            TicketId = 4
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            NotificationId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            NotificationId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            NotificationId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Registration")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 55,
                            CompanyId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Setra S 515 HD",
                            Registration = "A10-M-445",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 60,
                            CompanyId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Man Lions Coach R07",
                            Registration = "A10-M-446",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 35,
                            CompanyId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Setra S 516 HD",
                            Registration = "J92-T-116",
                            Type = 0
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "b8c8f735-a974-42fc-9e13-7f3732dbd2b5",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "dc942a37-3faa-4ca8-ac0f-200d470915fd",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT",
                            RoleLevel = 2
                        });
                });

            modelBuilder.Entity("BusTicket.Core.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("BusTicket.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNotificationEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VerificationSent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Sjeverni Logor 1",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1d512772-d9ca-4569-abc1-de69ba33c758",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "bus.admin@busticket.ba",
                            EmailConfirmed = true,
                            EnableNotificationEmail = false,
                            FirstName = "Bus",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUS.ADMIN@BUSTICKET.BA",
                            NormalizedUserName = "BUS.ADMIN@BUSTICKET.BA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "061123456",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "bus.admin@busticket.ba",
                            VerificationSent = true
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Sjeverni Logor 2",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "de25e150-79a1-4e74-a04e-a98c54b3a1fa",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "bus.client@busticket.ba",
                            EmailConfirmed = true,
                            EnableNotificationEmail = false,
                            FirstName = "Bus",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Client",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUS.CLIENT@BUSTICKET.BA",
                            NormalizedUserName = "BUS.CLIENT@BUSTICKET.BA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "061456123",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "bus.client@busticket.ba",
                            VerificationSent = true
                        });
                });

            modelBuilder.Entity("BusTicket.Core.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BusTicket.Core.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("BusTicket.Core.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BusTicket.Core.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusTicket.Core.ActivityLog", b =>
                {
                    b.HasOne("BusTicket.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicket.Core.City", b =>
                {
                    b.HasOne("BusTicket.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineDiscount", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLine", "BusLine")
                        .WithMany("Discounts")
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineSegment", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLine", "BusLine")
                        .WithMany("Segments")
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.BusStop", "BusStop")
                        .WithMany()
                        .HasForeignKey("BusStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");

                    b.Navigation("BusStop");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineSegmentPrice", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLineSegment", "BusLineSegmentFrom")
                        .WithMany()
                        .HasForeignKey("BusLineSegmentFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.BusLineSegment", null)
                        .WithMany("Prices")
                        .HasForeignKey("BusLineSegmentId");

                    b.HasOne("BusTicket.Core.Entities.BusLineSegment", "BusLineSegmentTo")
                        .WithMany()
                        .HasForeignKey("BusLineSegmentToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusLineSegmentFrom");

                    b.Navigation("BusLineSegmentTo");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineVehicle", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLine", "BusLine")
                        .WithMany("Vehicles")
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusStop", b =>
                {
                    b.HasOne("BusTicket.Core.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Company", b =>
                {
                    b.HasOne("BusTicket.Core.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Notification", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLine", "BusLine")
                        .WithMany()
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Ticket", b =>
                {
                    b.HasOne("BusTicket.Core.User", "PayedBy")
                        .WithMany()
                        .HasForeignKey("PayedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayedBy");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.TicketPerson", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("BusTicket.Core.Entities.Ticket", "Ticket")
                        .WithMany("Persons")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.TicketSegment", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.BusLineSegment", "BusLineSegmentFrom")
                        .WithMany()
                        .HasForeignKey("BusLineSegmentFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.BusLineSegment", "BusLineSegmentTo")
                        .WithMany()
                        .HasForeignKey("BusLineSegmentToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Entities.Ticket", "Ticket")
                        .WithMany("TicketSegments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLineSegmentFrom");

                    b.Navigation("BusLineSegmentTo");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.UserNotification", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.Notification", "Notification")
                        .WithMany("UserNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("BusTicket.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BusTicket.Core.RoleClaim", b =>
                {
                    b.HasOne("BusTicket.Core.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Core.UserClaim", b =>
                {
                    b.HasOne("BusTicket.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Core.UserLogin", b =>
                {
                    b.HasOne("BusTicket.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Core.UserRole", b =>
                {
                    b.HasOne("BusTicket.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicket.Core.UserToken", b =>
                {
                    b.HasOne("BusTicket.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLine", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Segments");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.BusLineSegment", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Notification", b =>
                {
                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("BusTicket.Core.Entities.Ticket", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("TicketSegments");
                });

            modelBuilder.Entity("BusTicket.Core.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BusTicket.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
